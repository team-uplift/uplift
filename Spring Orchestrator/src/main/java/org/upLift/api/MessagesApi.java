/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.upLift.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.upLift.model.Message;

import java.util.List;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
		date = "2025-03-16T14:18:35.909799305Z[GMT]")
@Validated
public interface MessagesApi {

	@Operation(summary = "Get a message by ID", description = "Retrieves a specific message by its ID.",
			tags = { "Messages" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Message details",
					content = @Content(mediaType = "application/json",
							schema = @Schema(implementation = Message.class))),

			@ApiResponse(responseCode = "404", description = "Message not found"),

			@ApiResponse(responseCode = "500", description = "Server error") })
	@GetMapping(value = "/messages/{id}", produces = { "application/json" })
	ResponseEntity<Message> messagesIdGet(
			@Parameter(in = ParameterIn.PATH, description = "persistence index of the message to retrieve",
					required = true,
					schema = @Schema()) @PathVariable("id") Integer id);


	@Operation(summary = "Send a message", description = "Allows a donor or recipient to send a message.",
			tags = { "Messages" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Message sent successfully",
					content = @Content(mediaType = "application/json",
							schema = @Schema(implementation = Message.class))),

			@ApiResponse(responseCode = "400", description = "Invalid request data"),

			@ApiResponse(responseCode = "500", description = "Server error") })
	@PostMapping(value = "/messages", produces = { "application/json" }, consumes = { "application/json" })
	ResponseEntity<Message> messagesPost(
			@Parameter(in = ParameterIn.HEADER, description = "Tracks the session for the given set of requests.",
					required = true,
					schema = @Schema()) @RequestHeader(value = "session_id", required = true) String sessionId,
			@Parameter(in = ParameterIn.DEFAULT, description = "new message to be saved", required = true,
					schema = @Schema()) @Valid @RequestBody Message body);


	@Operation(summary = "Get messages sent to a specific donor",
			description = "Retrieves messages sent to a specific donor.", tags = { "Messages" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200",
					description = "List of messages sent to a specific donor, " +
							"returns an empty array if the donor hasn't received any messages",
					content = @Content(mediaType = "application/json",
							array = @ArraySchema(schema = @Schema(implementation = Message.class)))),

			@ApiResponse(responseCode = "400", description = "Invalid request data"),

			@ApiResponse(responseCode = "404", description = "No such donor exists"),

			@ApiResponse(responseCode = "500", description = "Server error") })
	@GetMapping(value = "/messages/donor/{donorId}", produces = { "application/json" })
	ResponseEntity<List<Message>> messagesGetByDonor(
			@Parameter(in = ParameterIn.HEADER, description = "Tracks the session for the given set of requests.",
					required = true,
					schema = @Schema()) @RequestHeader(value = "session_id", required = true) String sessionId,
			@Parameter(in = ParameterIn.DEFAULT,
					description = "persistence index of the donor whose messages should be retrieved",
					required = true,
					schema = @Schema()) @PathVariable("donorId") Integer donorId);

}
