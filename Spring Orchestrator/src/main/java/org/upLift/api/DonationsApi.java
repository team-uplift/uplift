/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.upLift.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.upLift.model.Donation;

import jakarta.validation.Valid;
import org.upLift.model.TremendousOrderResponse;

import java.util.List;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
		date = "2025-03-16T14:18:35.909799305Z[GMT]")
@Validated
public interface DonationsApi {

	@Operation(summary = "Get a donation by ID", description = "Retrieves a specific donation transaction by its ID.",
			tags = { "Donations" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Donation details",
					content = @Content(mediaType = "application/json",
							schema = @Schema(implementation = Donation.class))),

			@ApiResponse(responseCode = "404", description = "Donation not found"),

			@ApiResponse(responseCode = "500", description = "Server error") })
	@RequestMapping(value = "/donations/{id}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Donation> donationsIdGet(
			@Parameter(in = ParameterIn.PATH, description = "", required = true,
					schema = @Schema()) @PathVariable("id") Integer id,
			@Parameter(in = ParameterIn.HEADER, description = "Tracks the session for the given set of requests.",
					required = true,
					schema = @Schema()) @RequestHeader(value = "session_id", required = true) String sessionId);



	@Operation(summary = "Get donations by donor", description = "Retrieves all donations made by a specified donor by donor ID.",
			tags = { "Donations" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Donation details",
					content = @Content(mediaType = "application/json",
							schema = @Schema(implementation = Donation.class))),

			@ApiResponse(responseCode = "404", description = "Donation not found"),

			@ApiResponse(responseCode = "500", description = "Server error") })
	@RequestMapping(value = "/donations/donor/{donorId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Donation>> donationsGetByDonor(
			@Parameter(in = ParameterIn.PATH, description = "", required = true,
					schema = @Schema()) @PathVariable("donorId") Integer id);



	@Operation(summary = "Create a new donation", description = "Adds a new donation transaction.",
			tags = { "Donations" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Donation successfully created",
					content = @Content(mediaType = "application/json",
							schema = @Schema(implementation = Donation.class))),

			@ApiResponse(responseCode = "400", description = "Invalid request data"),

			@ApiResponse(responseCode = "500", description = "Server error") })
	@RequestMapping(value = "/donations", produces = { "application/json" }, consumes = { "application/json" },
			method = RequestMethod.POST)
	ResponseEntity<Donation> donationsPost(
			@Parameter(in = ParameterIn.HEADER, description = "Tracks the session for the given set of requests.",
					required = true,
					schema = @Schema()) @RequestHeader(value = "session_id", required = true) String sessionId,
			@Parameter(in = ParameterIn.DEFAULT, description = "", required = true,
					schema = @Schema()) @Valid @RequestBody Donation body);

}
