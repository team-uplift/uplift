/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.upLift.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.upLift.model.FormQuestion;
import org.upLift.model.Recipient;
import org.upLift.model.RecipientTag;
import org.upLift.model.Tag;

import java.util.List;
import java.util.Set;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
		date = "2025-03-16T14:18:35.909799305Z[GMT]")
@Validated
public interface RecipientsApi {

	@Operation(summary = "Returns a random selection of tags associated with recipients",
			description = "Returns the specified number of randomly-chosen tags, all of which are were selected by "
					+ "one or more recipients.",
			security = {
					@SecurityRequirement(name = "userstore_auth", scopes = { "write:recipients", "read:recipients" }) },
			tags = { "Recipient" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "successful operation",
					content = @Content(mediaType = "application/json",
							array = @ArraySchema(schema = @Schema(implementation = Recipient.class)))),

			@ApiResponse(responseCode = "400", description = "Invalid tag value") })
	@GetMapping(value = "/recipients/tags/random", produces = { "application/json" })
	ResponseEntity<List<Tag>> getRandomSelectedTags(
			@Parameter(in = ParameterIn.QUERY, description = "Number of tags to return",
					schema = @Schema()) @RequestParam(value = "quantity", required = false) Integer quantity);

	@Operation(summary = "Finds Recipients by tags",
			description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
			security = {
					@SecurityRequirement(name = "userstore_auth", scopes = { "write:recipients", "read:recipients" }) },
			tags = { "Recipient" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "successful operation",
					content = @Content(mediaType = "application/json",
							array = @ArraySchema(schema = @Schema(implementation = Recipient.class)))),

			@ApiResponse(responseCode = "400", description = "Invalid tag value") })
	@GetMapping(value = "/recipients/findByTags", produces = { "application/json" })
	ResponseEntity<List<Recipient>> findRecipientsByTags(
			@Parameter(in = ParameterIn.QUERY, description = "Tags to filter by",
					schema = @Schema()) @Valid @RequestParam(value = "tag", required = false) List<String> tags);

	@Operation(summary = "Updates a recipient's tags with form data", description = "", tags = { "Recipient" })
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Created"),

			@ApiResponse(responseCode = "400", description = "Invalid input") })
	@RequestMapping(value = "/recipients/tagGeneration/{recipientId}", method = RequestMethod.POST)
	ResponseEntity<List<RecipientTag>> updateRecipientTags(
			@Parameter(in = ParameterIn.PATH, description = "Recipient id to generate tags for", required = true,
					schema = @Schema()) @PathVariable("recipientId") Integer recipientId,
			@Parameter(in = ParameterIn.DEFAULT, description = "A new set of form questions if needed. "
					+ "If not provided, the system will attempt to used the recipient's last stored form questions.",
					required = false, schema = @Schema()) @Valid @RequestBody List<FormQuestion> formQuestions);

	@Operation(summary = "Updates recipient's selected tags to be the provided tags",
			description = "Updates recipient linked tags to mark only the specified tags as being selected, "
					+ "clears any other selected flags for linked tags",
			tags = { "Recipient" })
	@ApiResponses(value = { @ApiResponse(responseCode = "204", description = "Selected tags updated"),

			@ApiResponse(responseCode = "400", description = "Invalid input") })
	@PutMapping(value = "/recipients/tagSelection/{recipientId}")
	ResponseEntity<Void> updateSelectedRecipientTags(
			@Parameter(in = ParameterIn.PATH, description = "Recipient id whose selected tags should be updated",
					required = true, schema = @Schema()) @PathVariable("recipientId") Integer recipientId,
			@Parameter(in = ParameterIn.DEFAULT, description = "List of tags that the recipient has selected.",
					required = true, schema = @Schema()) @Valid @RequestBody Set<String> selectedTags);

}
