package org.upLift.repositories;

import jakarta.persistence.EntityManager;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.upLift.model.Donor;
import org.upLift.model.Recipient;
import org.upLift.model.User;

import java.time.Instant;
import java.util.Optional;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

class UserRepositoryTest extends BaseRepositoryTest {

	// Code below generated by JetBrains AI Assistant with a few manual tweaks

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private EntityManager entityManager;

	@Test
	@DisplayName("Test finding a user by ID and validate all properties, including child entities")
	void testFindById() {
		// Check recipient with ID = 2
		Optional<User> recipient = userRepository.findById(2);
		assertThat(recipient.isPresent(), is(true));
		checkUser2(recipient.get());

		// Check donor with ID = 3
		Optional<User> donor = userRepository.findById(3);
		assertThat(donor.isPresent(), is(true));
		User donorUser = donor.get();

		// Validate User fields
		assertThat(donorUser.getId(), is(3));
		assertThat(donorUser.getCognitoId(), is("550e8400-e29b-41d4-a716-446655440002"));
		assertThat(donorUser.getEmail(), is("donor1@example.com"));
		assertThat(donorUser.isRecipient(), is(false));
		assertThat(donorUser.isDonor(), is(true));

		// Validate Donor details (child entity)
		Donor donorData = donorUser.getDonorData();
		assertThat(donorData, notNullValue());
		assertThat(donorData.getId(), is(3));
		assertThat(donorData.getNickname(), is("KindDonor1"));

		// Verify createdAt field (from AbstractCreatedAt)
		assertThat(donorData.getCreatedAt(), is(Instant.parse("2023-10-10T12:30:50.789Z")));
	}

	void checkUser2(User user) {
		// Validate User fields
		assertThat(user.getId(), is(2));
		assertThat(user.getCognitoId(), is("550e8400-e29b-41d4-a716-446655440001"));
		assertThat(user.getEmail(), is("recipient2@example.com"));
		assertThat(user.isRecipient(), is(true));

		// Validate Recipient details (child entity)
		Recipient recipientData = user.getRecipientData();
		assertThat(recipientData, notNullValue());
		assertThat(recipientData.getId(), is(2));
		assertThat(recipientData.getFirstName(), is("Jane"));
		assertThat(recipientData.getLastName(), is("Smith"));
		assertThat(recipientData.getStreetAddress1(), is("456 Oak St"));
		assertThat(recipientData.getStreetAddress2(), is(emptyOrNullString()));
		assertThat(recipientData.getCity(), is("Madison"));
		assertThat(recipientData.getState(), is("WI"));
		assertThat(recipientData.getZipCode(), is("53703"));
		assertThat(recipientData.getImageUrl(), is("http://example.com/image2.jpg"));
		assertThat(recipientData.getLastAboutMe(), is("About Jane"));
		assertThat(recipientData.getLastReasonForHelp(), is("Reason 2"));

		// Validate Recipient nested fields
		assertThat(recipientData.getFormQuestions(), hasSize(12));
		assertThat(recipientData.getFormQuestions(),
				hasItem(allOf(hasProperty("question", is("Are you currently looking for work?")),
						hasProperty("answer", is("Yes, part-time")))));
		assertThat(recipientData.getTags(), hasSize(7));
		assertThat(recipientData.getSelectedTags(), hasSize(5));
		assertThat(recipientData.getSelectedTags(),
				hasItems(hasProperty("tagName", is("job-training")), hasProperty("tagName", is("legal-aid")),
						hasProperty("tagName", is("housing")), hasProperty("tagName", is("transportation")),
						hasProperty("tagName", is("utilities"))));
		// Check one of the linked tags
		var linkedTag1 = recipientData.getSelectedTags().getFirst();
		assertThat(linkedTag1.getTagName(), is("housing"));
		assertThat(linkedTag1.getWeight(), is(0.62));
		assertThat(linkedTag1.getAddedAt(), is(Instant.parse("2023-10-10T14:45:30.987Z")));
		assertThat(linkedTag1.isSelected(), is(true));
		var tag1 = linkedTag1.getTag();
		assertThat(tag1.getTagName(), is("housing"));
		assertThat(tag1.getCategory(), is("necessities"));
		assertThat(tag1.getCreatedAt(), is(Instant.parse("2023-10-06T10:15:30.456Z")));

		// Validate Timestamp fields
		assertThat(recipientData.getIdentityLastVerified(), is(Instant.parse("2023-10-02T14:10:00.789Z")));
		assertThat(recipientData.getIncomeLastVerified(), is(Instant.parse("2023-10-03T15:20:40.321Z")));
		assertThat(recipientData.getTagsLastGenerated(), is(Instant.parse("2023-10-10T11:05:20.123Z")));
		assertThat(recipientData.getCreatedAt(), is(Instant.parse("2023-10-05T11:25:40.456Z")));
	}

	@Test
	@DisplayName("Test checking whether a user exists by ID")
	void testExistsById() {
		// Verify IDs exist or not
		assertThat(userRepository.existsById(1), is(true));
		assertThat(userRepository.existsById(4), is(true));
		assertThat(userRepository.existsById(99), is(false));
	}

	@Test
	@DisplayName("Test the save operation for new donor")
	void testSave_Donor() {
		Instant now = Instant.now();

		// Create a new user
		User newUser = new User();
		newUser.setCognitoId("550e8400-e29b-41d4-a716-123456789123");
		newUser.setEmail("newuser@example.com");
		newUser.setRecipient(false);

		var donor = new Donor();
		donor.setNickname("Donor1");
		newUser.setDonorData(donor);

		// Save the new user
		User savedUser = userRepository.save(newUser);
		// Ensure that changes are sent to the database and the new loaded user is
		// actually freshly pulled
		// from the database rather than just using the managed object
		entityManager.flush();
		entityManager.clear();

		var loadedUser = userRepository.findById(savedUser.getId())
			.orElseThrow(() -> new RuntimeException("User not found"));

		// Validate the saved user
		assertThat(loadedUser.getId(), notNullValue());
		assertThat(loadedUser.getCognitoId(), is("550e8400-e29b-41d4-a716-123456789123"));
		assertThat(loadedUser.getEmail(), is("newuser@example.com"));
		assertThat(loadedUser.isRecipient(), is(false));
		assertThat(loadedUser.isDonor(), is(true));
		assertThat(loadedUser.getCreatedAt(), is(notNullValue()));
		assertThat(loadedUser.getCreatedAt(), is(greaterThanOrEqualTo(now)));

		// Validate the saved donor data
		assertThat(loadedUser.getDonorData(), notNullValue());
		var donorData = loadedUser.getDonorData();
		assertThat(donorData.getId(), is(loadedUser.getId()));
		assertThat(donorData.getNickname(), is("Donor1"));
		assertThat(donorData.getCreatedAt(), is(greaterThanOrEqualTo(loadedUser.getCreatedAt())));
	}

	@Test
	@DisplayName("Test finding a user by cognito ID")
	void testFindByCognitoId() {
		// Retrieve user by cognito ID
		Optional<User> user = userRepository.findByCognitoId("550e8400-e29b-41d4-a716-446655440001");

		// Verify the retrieved user details
		assertThat(user.isPresent(), is(true));
		checkUser2(user.get());
	}

}
