package org.upLift.repositories;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.upLift.model.Donation;

import java.time.Instant;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

// Tests mostly generated by JetBrains AI Assistant, with a few manual tweaks
class DonationRepositoryTest extends BaseRepositoryTest {

	@Autowired
	private DonationRepository donationRepository;

	@Test
	void findById() {
		var donation = donationRepository.findById(1);

		assertThat(donation.isPresent(), is(true));
		assertThat(donation.get().getAmount(), is(50));
		assertThat(donation.get().getDonor().getId(), is(3));
		assertThat(donation.get().getRecipient().getId(), is(1));
		assertThat(donation.get().getCreatedAt(), is(Instant.parse("2023-10-21T16:00:30.321Z")));
	}

	@Test
	void findWithDonorbyId() {
		var donation = donationRepository.findWithDonorbyId(2);

		assertThat(donation.isPresent(), is(true));
		assertThat(donation.get().getAmount(), is(75));
		assertThat(donation.get().getDonor(), notNullValue());
		assertThat(donation.get().getDonor().getNickname(), is("KindDonor1"));
		assertThat(donation.get().getCreatedAt(), is(Instant.parse("2023-10-22T17:05:40.654Z")));
	}

	@Test
	void findByDonorId() {
		List<Donation> donations = donationRepository.findByDonorId(3);

		assertThat(donations, hasSize(2));
		assertThat(donations, everyItem(hasProperty("donor", hasProperty("id", is(3)))));
		assertThat(donations, everyItem(hasProperty("recipient", notNullValue())));

		assertThat(donations, hasItems(hasProperty("amount", is(50)), hasProperty("amount", is(75))));
	}

	@Test
	void findByRecipientId() {
		List<Donation> donations = donationRepository.findByRecipientId(1);

		assertThat(donations, hasSize(2));
		assertThat(donations, everyItem(hasProperty("recipient", hasProperty("id", is(1)))));
		assertThat(donations, everyItem(hasProperty("donor", notNullValue())));

		assertThat(donations, hasItems(hasProperty("amount", is(50)), hasProperty("amount", is(100))));
	}

}
