package org.upLift.repositories;

import jakarta.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.upLift.model.Donation;

import java.time.Instant;
import java.util.Comparator;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

// Tests mostly generated by JetBrains AI Assistant, with a few manual tweaks
class DonationRepositoryTest extends BaseRepositoryTest {

	@Autowired
	private DonationRepository donationRepository;

	@Autowired
	private EntityManager entityManager;

	@Test
	void findForPublicById() {
		var result = donationRepository.findForPublicById(2);

		assertThat(result.isPresent(), is(true));
		checkDonation(result.get());
	}

	void checkDonation(Donation donation) {
		assertThat(donation.getId(), is(2));
		assertThat(donation.getAmount(), is(75));
		assertThat(donation.getDonor(), notNullValue());
		assertThat(donation.getDonor().getId(), is(3));
		assertThat(donation.getDonor().getNickname(), is("KindDonor1"));
		assertThat(donation.getRecipient(), is(notNullValue()));
		assertThat(donation.getRecipient().getId(), is(2));
		assertThat(donation.getRecipient().getNickname(), is("Janie"));
		assertThat(donation.getCreatedAt(), is(Instant.parse("2023-10-22T17:05:40.654Z")));
	}

	@Test
	void findByDonorId() {
		List<Donation> donations = donationRepository.findByDonorId(3);

		assertThat(donations, hasSize(2));
		assertThat(donations, everyItem(hasProperty("donor", hasProperty("id", is(3)))));
		assertThat(donations, everyItem(hasProperty("recipient", notNullValue())));
		assertThat(donations, hasItems(hasProperty("amount", is(50)), hasProperty("amount", is(75))));

		donations.sort(Comparator.comparingInt(Donation::getId));
		checkDonation(donations.get(1));
	}

	@Test
	void findByRecipientId() {
		List<Donation> donations = donationRepository.findByRecipientId(1);

		assertThat(donations, hasSize(2));
		assertThat(donations, everyItem(hasProperty("recipient", hasProperty("id", is(1)))));
		assertThat(donations, everyItem(hasProperty("donor", notNullValue())));

		assertThat(donations, hasItems(hasProperty("amount", is(50)), hasProperty("amount", is(100))));
	}

	@Test
	void saveDonation() {
		var donation = new Donation();
		donation.setDonorId(3);
		donation.setRecipientId(2);
		donation.setAmount(75);

		var savedDonation = donationRepository.save(donation);

		// Ensure changes are flushed to the database
		entityManager.flush();
		entityManager.clear();

		// Reload the donor from the database
		var loadedDonation = donationRepository.findById(savedDonation.getId())
			.orElseThrow(() -> new RuntimeException("Donation not found"));

		assertThat(loadedDonation.getDonor(), is(notNullValue()));
		assertThat(loadedDonation.getDonorId(), is(3));
		assertThat(loadedDonation.getRecipient(), is(notNullValue()));
		assertThat(loadedDonation.getRecipientId(), is(2));
		assertThat(loadedDonation.getAmount(), is(75));
		assertThat(loadedDonation.getThankYouMessage(), is(nullValue()));
	}

}
