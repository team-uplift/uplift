package org.upLift.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.upLift.model.FormQuestion;
import org.upLift.repositories.RecipientRepository;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

// Initial tests generated by JetBrains AI Assistant, modified as needed

@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)
class RecipientsApiControllerIntegrationTest extends BaseControllerIntegrationTest {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private ObjectMapper objectMapper;

	@Autowired
	private RecipientRepository recipientRepository;

	@Test
	void testGetRandomSelectedTags() throws Exception {
		// Test with specified quantity
		mockMvc.perform(get("/recipients/tags/random").param("quantity", "3").accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			.andExpect(jsonPath("$", hasSize(3)))
			.andExpect(jsonPath("$[*].tagName", notNullValue()))
			// Tag only selected by deleted recipient 9 should never be included
			.andExpect(jsonPath("$[*].tagName", not(hasItem("elderly parent"))))
			// Tag linked but not selected by any recipient should never be included
			.andExpect(jsonPath("$[*].tagName", not(hasItem("education"))))
			.andExpect(jsonPath("$[*].createdAt", notNullValue()));

		// Test with default quantity of 15
		mockMvc.perform(get("/recipients/tags/random").accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			// There are only 12 selected tags in the data set
			.andExpect(jsonPath("$", hasSize(12)))
			.andExpect(jsonPath("$[*].tagName",
					containsInAnyOrder("childcare", "clothing", "financial-planning", "food", "food-banks", "health",
							"housing", "job-training", "legal-aid", "mental-health", "transportation", "utilities")))
			.andExpect(jsonPath("$[*].tagName", allOf(not(hasItem("elderly parent")), not(hasItem("education")))));
	}

	@Test
	void testFindRecipientsByTags() throws Exception {
		// Recipient 1 only linked to housing, selected it
		var recipient1 = recipientRepository.findById(1).orElseThrow(() -> new AssertionError("Recipient 1 not found"));
		assertThat("recipient 1 only linked to one tested tag", recipient1.getTagNames(), allOf(hasItem("housing"),
				not(hasItem("elderly parent")), not(hasItem("food-banks")), not(hasItem("job-training"))));
		assertThat(recipient1.getSelectedTagNames(), hasItem("housing"));

		// Recipient 2 linked to housing and job-training, selected both
		var recipient2 = recipientRepository.findById(2).orElseThrow(() -> new AssertionError("Recipient 2 not found"));
		assertThat("recipient 2 linked to two of tested tags", recipient2.getTagNames(),
				allOf(hasItems("housing", "job-training"), not(hasItem("elderly parent")), not(hasItem("food-banks"))));
		assertThat(recipient2.getSelectedTagNames(), hasItems("housing", "job-training"));

		// Recipient 5 linked to all tags, selected all 3
		var recipient5 = recipientRepository.findById(5).orElseThrow(() -> new AssertionError("Recipient 5 not found"));
		assertThat(recipient5.getTagNames(), not(hasItem("elderly parent")));
		assertThat("recipient 5 has all tags selected except elderly parent", recipient5.getSelectedTagNames(),
				hasItems("food-banks", "housing", "job-training"));

		// Recipient 6 linked to all tags, but only selected housing and job-training
		var recipient6 = recipientRepository.findById(6).orElseThrow(() -> new AssertionError("Recipient 6 not found"));
		assertThat("recipient 6 linked to all tested tags except elderly parent", recipient6.getTagNames(),
				allOf(hasItems("food-banks", "housing", "job-training"), not(hasItem("elderly parent"))));
		assertThat("recipient 6 only has two tested tags selected", recipient6.getSelectedTagNames(),
				allOf(hasItems("housing", "job-training"), not(hasItem("food-banks"))));

		// Recipient 7 linked only to food-banks, not selected
		var recipient7 = recipientRepository.findById(7).orElseThrow(() -> new AssertionError("Recipient 7 not found"));
		assertThat(recipient7.getTagNames(), allOf(hasItems("food-banks"), not(hasItem("elderly parent")),
				not(hasItem("housing")), not(hasItem("job-training"))));
		assertThat("recipient 7 doesn't have any of the test tags selected", recipient7.getSelectedTagNames(),
				allOf(not(hasItem("food-banks")), not(hasItem("housing")), not(hasItem("job-training"))));

		// Recipient 9 linked to food-banks and job-training, selected both
		var recipient9 = recipientRepository.findById(9).orElseThrow(() -> new AssertionError("Recipient 9 not found"));
		assertThat("recipient 9 linked to two tested tags", recipient9.getTagNames(),
				allOf(hasItems("elderly parent", "food-banks", "job-training"), not(hasItem("housing"))));
		assertThat("recipient 9 selected all linked tags", recipient9.getSelectedTagNames(),
				hasItems("elderly parent", "food-banks", "job-training"));

		// Loading using "food-banks" and "job-training", to test:
		// Recipient included even if tag isn't selected (includes recipient 7)
		// Recipient excluded if deleted (excludes recipient 9)
		// Recipient ordering:
		// Recipients 5 and 6 ordered before 2 because 5 and 6 matches two tags,
		// and recipient 5 ordered before 6 because 5 was created earlier
		ResultActions resultA = mockMvc
			.perform(get("/recipients/findByTags").param("tag", "food-banks")
				.param("tag", "job-training")
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			.andExpect(jsonPath("$", hasSize(4)))
			.andExpect(jsonPath("$[0].id", is(5)))
			.andExpect(jsonPath("$[1].id", is(6)))
			.andExpect(jsonPath("$[2].id", is(2)))
			.andExpect(jsonPath("$[3].id", is(7)));

		// Verify recipient properties
		checkRecipient5PublicData(resultA, "$[0]");
		checkPrivateRecipientPropertiesNotPresent(resultA, "$[0]");
		checkRecipient2PublicData(resultA, "$[2]");
		checkPrivateRecipientPropertiesNotPresent(resultA, "$[2]");
		// Don't bother with full property check for recipient 6, already checked the
		// other 2 recipients

		// Test with single tag that matches multiple recipients
		// Already did full recipient property check above, so just check recipient ids
		// for recipients included and return order (based on creation date)
		mockMvc.perform(get("/recipients/findByTags").param("tag", "housing").accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			.andExpect(jsonPath("$", hasSize(4)))
			.andExpect(jsonPath("$[0].id", is(1)))
			.andExpect(jsonPath("$[1].id", is(2)))
			.andExpect(jsonPath("$[2].id", is(5)))
			.andExpect(jsonPath("$[3].id", is(6)));

		// Test with tag that only matches deleted recipient 9 and fake tag that doesn't
		// match any recipients
		mockMvc
			.perform(get("/recipients/findByTags").param("tag", "elderly parent")
				.param("tag", "nonsense")
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			.andExpect(jsonPath("$", hasSize(0)));
	}

	@Test
	// This test will change linked tags for the recipient, affecting the other tests,
	// so reset context after it
	@DirtiesContext(methodMode = DirtiesContext.MethodMode.AFTER_METHOD)
	void testUpdateRecipientTags() throws Exception {
		String todayUtc = getTodayUtc().toString();

		// Check recipient 1 tags before update
		var recipient1 = recipientRepository.findById(1).orElseThrow(() -> new AssertionError("Recipient 1 not found"));
		assertThat(recipient1.getTagNames(), hasSize(8));
		assertThat(recipient1.getTagNames(), contains("childcare", "clothing", "food", "health", "housing",
				"mental-health", "transportation", "utilities"));
		assertThat("All linked tags except transportation selected", recipient1.getSelectedTagNames(),
				contains("childcare", "clothing", "food", "health", "housing", "mental-health", "utilities"));
		// Check weights on tags where the weight will be updated
		// Put tags into list for easier index-based access
		var tags = new ArrayList<>(recipient1.getTags());
		assertThat(tags.get(1).getWeight(), is(0.5));
		assertThat(tags.get(2).getWeight(), is(0.75));
		assertThat(tags.get(6).getWeight(), is(0.4));

		// Create form questions
		List<FormQuestion> formQuestions = Arrays.asList(new FormQuestion("Tell us about yourself", "I am a test user"),
				new FormQuestion("What is your biggest challenge?", "Finding stable housing"));

		// Test tag generation
		mockMvc
			.perform(post("/recipients/tagGeneration/1").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(formQuestions))
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isCreated())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			// Mock method returns "clothing", "food", "legal-aid", "transportation", and
			// "wheelchair access"
			// Two tags not previously-linked to recipient 1 are now included
			.andExpect(jsonPath("$", hasSize(10)))
			.andExpect(jsonPath("$[*].tagName",
					contains("childcare", "clothing", "food", "health", "housing", "legal-aid", "mental-health",
							"transportation", "utilities", "wheelchair access")))
			// Check tag properties
			// Tags previously-linked but not included in the update should be the same
			// Tags previously-linked and included in the update should have weights and
			// addedAt dates updated
			// New tags not previously-linked should be added
			// Tag 0 - "childcare" = unchanged
			.andExpect(jsonPath("$[0].tagName", is("childcare")))
			.andExpect(jsonPath("$[0].weight", is(0.7)))
			.andExpect(jsonPath("$[0].addedAt", is("2023-10-17T11:10:30.123Z")))
			.andExpect(jsonPath("$[0].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged
			.andExpect(jsonPath("$[0].category", is("family")))
			.andExpect(jsonPath("$[0].createdAt", is("2023-10-17T14:00:30.321Z")))
			// Tag 1 - "clothing", new weight and addedAt
			.andExpect(jsonPath("$[1].tagName", is("clothing")))
			.andExpect(jsonPath("$[1].weight", is(0.85)))
			.andExpect(jsonPath("$[1].addedAt", startsWith(todayUtc)))
			.andExpect(jsonPath("$[1].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged even though
			// recipient tag properties changes
			.andExpect(jsonPath("$[1].category", is("necessities")))
			.andExpect(jsonPath("$[1].createdAt", is("2023-10-10T10:25:40.456Z")))
			// Tag 2 - "food", new weight and addedAt
			.andExpect(jsonPath("$[2].tagName", is("food")))
			.andExpect(jsonPath("$[2].weight", is(0.47)))
			.andExpect(jsonPath("$[2].addedAt", startsWith(todayUtc)))
			.andExpect(jsonPath("$[2].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged even though
			// recipient tag properties changes
			.andExpect(jsonPath("$[2].category", is("necessities")))
			.andExpect(jsonPath("$[2].createdAt", is("2023-10-05T09:20:30.123Z")))
			// Tag 3 - "health" = unchanged
			.andExpect(jsonPath("$[3].tagName", is("health")))
			.andExpect(jsonPath("$[3].weight", is(0.8)))
			.andExpect(jsonPath("$[3].addedAt", is("2023-10-05T09:30:30.123Z")))
			.andExpect(jsonPath("$[3].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged
			.andExpect(jsonPath("$[3].category", is("necessities")))
			.andExpect(jsonPath("$[3].createdAt", is("2023-10-05T09:25:30.123Z")))
			// Tag 4 - "housing" = unchanged
			.andExpect(jsonPath("$[4].tagName", is("housing")))
			.andExpect(jsonPath("$[4].weight", is(0.9)))
			.andExpect(jsonPath("$[4].addedAt", is("2023-10-10T11:50:20.789Z")))
			.andExpect(jsonPath("$[4].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged
			.andExpect(jsonPath("$[4].category", is("necessities")))
			.andExpect(jsonPath("$[4].createdAt", is("2023-10-06T10:15:30.456Z")))
			// Tag 5 - "legal-aid", new link to existing tag
			.andExpect(jsonPath("$[5].tagName", is("legal-aid")))
			.andExpect(jsonPath("$[5].weight", is(0.73)))
			.andExpect(jsonPath("$[5].addedAt", startsWith(todayUtc)))
			// Tag not initially selected
			.andExpect(jsonPath("$[5].selected", is(false)))
			// Check underlying Tag values just to show it's unchanged even though
			// recipient tag properties changes
			.andExpect(jsonPath("$[5].category", is("support")))
			.andExpect(jsonPath("$[5].createdAt", is("2023-10-20T17:30:50.321Z")))
			// Tag 6 - "mental-health" = unchanged
			.andExpect(jsonPath("$[6].tagName", is("mental-health")))
			.andExpect(jsonPath("$[6].weight", is(0.8)))
			.andExpect(jsonPath("$[6].addedAt", is("2023-10-18T12:15:40.654Z")))
			.andExpect(jsonPath("$[6].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged
			.andExpect(jsonPath("$[6].category", is("well-being")))
			.andExpect(jsonPath("$[6].createdAt", is("2023-10-18T15:10:40.654Z")))
			// Tag 7 - "transportation", new weight and addedAt
			.andExpect(jsonPath("$[7].tagName", is("transportation")))
			.andExpect(jsonPath("$[7].weight", is(0.88)))
			.andExpect(jsonPath("$[7].addedAt", startsWith(todayUtc)))
			// Selected flag hasn't changed
			.andExpect(jsonPath("$[7].selected", is(false)))
			// Check underlying Tag values just to show it's unchanged even though
			// recipient tag properties changes
			.andExpect(jsonPath("$[7].category", is("support")))
			.andExpect(jsonPath("$[7].createdAt", is("2023-10-10T12:45:40.789Z")))
			// Tag 8 - "utilities" = unchanged
			.andExpect(jsonPath("$[8].tagName", is("utilities")))
			.andExpect(jsonPath("$[8].weight", is(0.6)))
			.andExpect(jsonPath("$[8].addedAt", is("2023-10-18T10:25:10.123Z")))
			.andExpect(jsonPath("$[8].selected", is(true)))
			// Check underlying Tag values just to show it's unchanged
			.andExpect(jsonPath("$[8].category", is("necessities")))
			.andExpect(jsonPath("$[8].createdAt", is("2023-10-15T13:50:50.987Z")))
			// Tag 9 - "wheelchair access", new link to new tag
			.andExpect(jsonPath("$[9].tagName", is("wheelchair access")))
			.andExpect(jsonPath("$[9].weight", is(0.93)))
			.andExpect(jsonPath("$[9].addedAt", startsWith(todayUtc)))
			// Tag not initially selected
			.andExpect(jsonPath("$[9].selected", is(false)))
			// Check underlying Tag newly created
			.andExpect(jsonPath("$[9].category").doesNotExist())
			.andExpect(jsonPath("$[9].createdAt", startsWith(todayUtc)));

		// Test trying to update tags for non-existent recipient
		mockMvc
			.perform(post("/recipients/tagGeneration/999").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(formQuestions))
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isNotFound())
			.andExpect(jsonPath("$.errorMessage", is("Recipient not found")))
			.andExpect(jsonPath("$.status", is(404)))
			.andExpect(jsonPath("$.errorType", is("Not Found")))
			.andExpect(jsonPath("$.path", is("/recipients/tagGeneration/999")))
			.andExpect(jsonPath("$.notFoundEntityId", is(999)))
			.andExpect(jsonPath("$.notFoundEntityType", is("Recipient")));
	}

	@Test
	void testUpdateSelectedRecipientTags() throws Exception {
		// Test updating selected tags on deleted recipient 9 to avoid conflict with other
		// tests

		var preUpdate = recipientRepository.findById(9).orElseThrow(() -> new AssertionError("Recipient 9 not found"));
		assertThat(preUpdate.getTagNames(), contains("elderly parent", "financial-planning", "food-banks", "health",
				"job-training", "transportation"));
		assertThat("transportation not selected", preUpdate.getSelectedTagNames(),
				contains("elderly parent", "financial-planning", "food-banks", "health", "job-training"));

		// Include tags linked to recipient 9, plus one not linked
		Set<String> selectedTags = Set.of("elderly parent", "food-banks", "health", "transportation", "utilities");

		mockMvc
			.perform(put("/recipients/tagSelection/9").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(selectedTags))
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isNoContent());

		var postUpdate = recipientRepository.findById(9).orElseThrow(() -> new AssertionError("Recipient 9 not found"));
		assertThat("utilties not linked", postUpdate.getTagNames(), contains("elderly parent", "financial-planning",
				"food-banks", "health", "job-training", "transportation"));
		assertThat("transportation selected now, others deselected", postUpdate.getSelectedTagNames(),
				contains("elderly parent", "food-banks", "health", "transportation"));

		// Test updating selected tags for non-existent recipient
		mockMvc
			.perform(put("/recipients/tagSelection/999").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(selectedTags))
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isNotFound())
			.andExpect(jsonPath("$.errorMessage", is("Recipient not found")))
			.andExpect(jsonPath("$.status", is(404)))
			.andExpect(jsonPath("$.errorType", is("Not Found")))
			.andExpect(jsonPath("$.path", is("/recipients/tagSelection/999")))
			.andExpect(jsonPath("$.notFoundEntityId", is(999)))
			.andExpect(jsonPath("$.notFoundEntityType", is("Recipient")));
	}

	@Test
	void testVerifyRecipientIncome() throws Exception {
		// Create mock file
		MockMultipartFile file = new MockMultipartFile("incomeVerificationFile", "test.pdf",
				MediaType.APPLICATION_PDF_VALUE, "test file content".getBytes());

		// Test income verification for odd-numbered recipient (should return true)
		mockMvc.perform(multipart(HttpMethod.PUT, "/recipients/verification/income/1").file(file))
			.andExpect(status().isOk())
			.andExpect(content().string("true"));

		// Test income verification for even-numbered recipient (should return false)
		mockMvc.perform(multipart(HttpMethod.PUT, "/recipients/verification/income/2").file(file))
			.andExpect(status().isOk())
			.andExpect(content().string("false"));

		// Test income for non-existent recipient
		mockMvc.perform(multipart(HttpMethod.PUT, "/recipients/verification/income/999").file(file))
			.andExpect(status().isNotFound())
			.andExpect(jsonPath("$.errorMessage", is("Recipient not found, can't verify income")))
			.andExpect(jsonPath("$.status", is(404)))
			.andExpect(jsonPath("$.errorType", is("Not Found")))
			.andExpect(jsonPath("$.path", is("/recipients/verification/income/999")))
			.andExpect(jsonPath("$.notFoundEntityId", is(999)))
			.andExpect(jsonPath("$.notFoundEntityType", is("Recipient")));
	}

	@Test
	void testGetMatchedRecipient() throws Exception {
		// Create form questions
		List<FormQuestion> formQuestions = Arrays.asList(
				new FormQuestion("What causes do you want to support?", "Food insecurity and housing"),
				new FormQuestion("What interests you?", "Helping people find jobs"));

		// Mock service returns "childcare", "education", and "health"
		// Recipient 1 selected both "childcare" and "health
		// Recipient 2 matched "education" and "health", but didn't select either -
		// expired income verification
		// Recipient 5 selected "childcare", also matched "health" but not selected
		// Recipient 6 selected "health" - no income verification
		// Recipient 7 doesn't match any of the tags
		// Recipient 9 selected "health" but is deleted

		// Test matching recipients
		ResultActions result = mockMvc
			.perform(post("/recipients/matching").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(formQuestions))
				.accept(MediaType.APPLICATION_JSON))
			.andExpect(status().isOk())
			.andExpect(content().contentType(MediaType.APPLICATION_JSON))
			.andExpect(jsonPath("$", hasSize(3)))
			// Although 4 recipients matched the tags, one has an expired income
			// verification
			// and one has no verified income, so recipient 7 is added to fill in
			.andExpect(jsonPath("$[0].id", is(1)))
			.andExpect(jsonPath("$[1].id", is(5)))
			.andExpect(jsonPath("$[2].id", is(7)));

		checkRecipient1PublicData(result, "$[0]");
		checkPrivateRecipientPropertiesNotPresent(result, "$[0]");
		checkRecipient5PublicData(result, "$[1]");
		checkPrivateRecipientPropertiesNotPresent(result, "$[1]");
		checkPrivateRecipientPropertiesNotPresent(result, "$[2]");
	}

}
