// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

// ----------------------------------------------
// ---- Static Table Definitions ---- NOTE: These are not all of the table definitions. There are automated tables generated from the associations defined in the "Refernce table definition" section
// ----------------------------------------------
Table recipients { // Tracks our known recipients
  id integer [primary key] // We may not need an ID if we're only going to allow recipients to be created through Cognito.
  cognito_id uuid [not null] 
  username integer // Might be useful to track username for UI purposes so we aren't hitting cognito for everything.
  email varchar [not null]
  last_profile_text text [not null] // This is the latest collective text that is/will be utilized to generate the tags through a single prompt.
  amount_received double
  income_verified bool // True for verified, False for unverified
  nickname varchar
  created_at timestamp 
}

Table donors { // Tracks our known donors
  id integer [primary key] // Since donor's don't need to sign up, we'll need an ID to track them regardkess
  cognito_id uuid // Optional id if donors decide to sign up. 
  username varchar // Might be useful to track username for UI purposes so we aren't hitting cognito for everything.
  email varchar [not null]
  last_quiz_text text [not null] // This is a collective text that is/will be utilized to generate the tags through a single prompt from their last donation quiz.
  nickname varchar
  created_at timestamp
}

Table donations { // Tracks all of the donation transactions that have occured
  id integer [primary key]
  donor_id integer [not null] // Will be foreign key to donor table (defined below)
  recipient_id integer [not null] // Will be foreign key to recipient table (defined below)
  amount integer [not null]
  created_at timestamp
}

Table tags { // Tracks all the known tags
  tag_name varchar [primary key]
  created_at timestamp
}

Table messages { // Tracks messages between users
  id integer [primary key]
  donor_id integer [not null] // Will be foreign key to donor table (defined below)
  recipient_id integer [not null] // Will be foreign key to recipient table (defined below)
  message text [not null]
  created_at timestamp
}

Table historical_recipient_promps { // Tracks historical prompts that recipient made.
  id integer [primary key]
  recipient_id integer // Will be foreign key to recipient table (defined below)
  prompt text [not null]
  created_at timestamp
}

Table historical_donor_promps { // Tracks historical prompts that donor made.
  id integer [primary key]
  donor_id integer // Will be foreign key to donor table (defined below)
  prompt text [not null]
  created_at timestamp
}

// ----------------------------------------------
// ---- Reference table definitions ---- These will automatically generate tables based on our relationship definitions (Export to SQL and see for yourself!).
// ----------------------------------------------

// Create a table to track tags to recipients
// many-to-many. Many recipients can share a tag and a recipient can have many tags.
Ref recipient_tags: tags.tag_name <> recipients.id 

// Create table to track the last shown tags to specific donors.
// many-to-many. Many recipients can share a tag and a recipient can have many tags.
//Ref last_shown_tags: tags.tag_name <> donors.id 
Table last_shown_tags {
   tag_name varchar [pk, ref: > tags.tag_name] 
   donor_id integer [pk, ref: > donors.id]
   shown_at timestamp
} 

// Create table to track a donor's favorite recipients.
// many-to-many. A donor can favorite many recipients. Recipients can be favorited by many donors.  
Ref favorite_recipients: donors.id <> recipients.id

// ----------------------------------------------
// ---- Foreign Key Relationship definitions ----
// ----------------------------------------------
// Each donation should be one donor to one recipient
Ref: donors.id - donations.donor_id
Ref: recipients.id - donations.recipient_id 

// Each message should be one donor to one recipient
Ref: donors.id - messages.donor_id
Ref: recipients.id - messages.recipient_id 

// many-to-one. Each recepient should have many prompts. Prompts should be assigned to a single recipient.
Ref: recipients.id < historical_recipient_promps.recipient_id
// Same applies for donors
Ref: donors.id < historical_donor_promps.donor_id
