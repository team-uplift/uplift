// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

// ----------------------------------------------
// ---- Static Table Definitions ---- NOTE: These are not all of the table definitions. There are automated tables generated from the associations defined in the "Reference table definition" section
// ----------------------------------------------

// Tracks all users and their current primary role.
// This is because users could potentially switch between donor and recipient and we don't want to lose past
// data associated with them in the previous role, but when they log in they should come in as only one role
Table users {
    id integer [primary key, increment]
    cognito_id uuid
    email varchar(320) // email is serving as username for Cognito accounts
    recipient boolean // tracks whether the user is currently primarily a recipient or a donor
    created_at timestamp(3) [not null]

  indexes {
    cognito_id [unique, name: 'UQ_users_cognito_id']
  }
}

// Note that total donation amount to recipient is tracked using separate donations table to avoid issues with
// possible inconsistent values
Table recipients { // Tracks our known recipients
  id integer [primary key] // FK to parent user entry
  first_name varchar(255)
  last_name varchar(255)
  street_address1 nvarchar(255)
  street_address2 nvarchar(255)
  city nvarchar(255)
  state char(2)
  zip_code varchar(10)
  last_about_me text [not null] // latest "about me" text that is/will be utilized to generate the tags
  last_reason_for_help text [not null] // latest "why I need help" text that is/will be utilized to generate the tags through a single prompt.
  form_questions json [not null] // holds a JSON object used to map the questions asked of the recipient plus their responses
                                 // stored as a JSON object for greater flexibility, since questions will likely change
                                 // and won't be displayed to the donor - they're only used to generate tags
  image_url varchar(512) // holds URL of image to display for the recipient, if any
  identity_last_verified timestamp(3) // Date/time the recipient's identity was last verified, used to determine if recipient identity needs to be re-verified
  income_last_verified timestamp(3) // Date/time the recipient's income was last verified, used to determine if recipient income needs to be re-verified
  nickname nvarchar(64)
  tags_last_generated_at timestamp(3) // tracks the date/time tags were last generated for the recipient
  created_at timestamp(3) [not null] // keep a separate created_at for recipients and donors since these entries
                                     // may be added after initial user registration if user switches roles
  last_donation_timestamp timestamp(3) // tracks the date/time the recipient last received a donation
}

Table donors { // Tracks our known donors
  id integer [primary key] // FK to parent user entry
  nickname nvarchar(64)
  created_at timestamp(3) [not null] // keep a separate created_at for recipients and donors since these entries
                                       // may be added after initial user registration if user switches roles
}

// Tracks each time a donor has started the process to donate to a recipient via the matching system.
Table donor_sessions {
  id integer [primary key, increment]
  donor_id integer [not null] // foreign key to donor table
  created_at timestamp(3) [not null] // date/time the session started
}

Table donations { // Tracks all of the donation transactions that have occurred
  id integer [primary key, increment]
  donor_id integer [not null] // Will be foreign key to donor table
  recipient_id integer [not null] // Will be foreign key to recipient table
  amount integer [not null]
  created_at timestamp(3) [not null]
}

Table tags { // Tracks all the known tags
  tag_name varchar(64) [primary key]
  category varchar(128)
  created_at timestamp(3) [not null]
}

Table messages { // Tracks "thank-you" message from recipient to donor, linked to specific donation
  id integer [primary key, increment]
  donation_id integer [not null] // Will be foreign key to donation table
  message text [not null]
  donor_read boolean [not null]
  created_at timestamp(3) [not null]
}

Table donor_prompts { // Tracks historical prompts that donor was given in a specific session
  id integer [primary key, increment]
  donor_session_id integer [not null] // Will be foreign key to donor_sessions table
  prompt text [not null]
  created_at timestamp(3) [not null]
}

// ----------------------------------------------
// ---- Reference table definitions ----
// ----------------------------------------------
// Explicitly define join tables to control table and column names

// Create a table to track tags to recipients
// many-to-many. Many recipients can share a tag and a recipient can have many tags.
Table recipient_tags {
    // Use a separate incremented PK instead of a composite primary key to simplify JPA mapping,
    // it gets complicated with a many-to-many association table that has attributes of its won
    id integer [primary key, increment]
    tag_name varchar(64) [not null]
    recipient_id integer [not null]
    weight double
    selected boolean [not null]
    added_at timestamp(3) [not null]

    indexes {
        // Create a unique index on the tag/recipient combination - not as good as a PK,
        // but helps enforce uniqueness and improves searching
        (recipient_id, tag_name) [unique, name: 'UQ_recipient_tags_recipient_id_tag_name']
    }
}

// Create table to track which tags were shown to a donor in a specific session
// many-to-many. Many donors can be shown the same tag and a donor can be shown many tags.
Table donor_shown_tags {
   tag_name varchar(64) [pk] // foreign key to the tag shown
   donor_session_id integer [pk] // foreign key to donor_session, marking when the tags were shown
}

// Create table to track the tags that a donor selected in a specific session
// many-to-many. Many tags can be selected by the same donor and a donor can select many tags.
Table donor_selected_tags {
   tag_name varchar(64) [pk] // foreign key to the tag shown
   donor_session_id integer [pk] // foreign key to donor_session, marking when the tags were selected
}

// Create table to track a donor's favorite recipients.
// many-to-many. A donor can favorite many recipients. Recipients can be favorited by many donors.
Table favorite_recipients {
    donor_id integer [pk]
    recipient_id integer [pk]
}

// ----------------------------------------------
// ---- Foreign Key Relationship definitions ----
// ----------------------------------------------
// Define FKs here rather than inline because this allows specification of constraint names

// Both recipients and donors share the same PK as the corresponding parent users table entry,
// to help keep them linked
Ref FK_recipients_user: recipients.id > users.id
Ref FK_donors_user: donors.id > users.id

// Each donation should be one donor to one recipient
Ref FK_donations_donor: donors.id - donations.donor_id
Ref FK_donations_recipient: recipients.id - donations.recipient_id

// Each message should be linked to a specific donation
Ref FK_messages_donation: messages.donation_id > donations.id

// many-to-one link between donor and donor_session
Ref FK_donor_sessions_donor: donor_sessions.donor_id > donors.id

// many-to-one. Each donor should have many prompts. Prompts should be assigned to a single donor session.
Ref FK_donor_prompts_donor_session: donor_sessions.id < donor_prompts.donor_session_id

// Foreign keys for recipient_tags join table
Ref FK_recipient_tags_tag: recipient_tags.tag_name > tags.tag_name
Ref FK_recipient_tags_recipient: recipient_tags.recipient_id > recipients.id

// Foreign keys for donor_shown_tags table
Ref FK_donor_shown_tags_tag: donor_shown_tags.tag_name > tags.tag_name
Ref FK_donor_shown_tags_donor_session: donor_shown_tags.donor_session_id > donor_sessions.id

// Foreign keys for donor_selected_tags table
Ref FK_donor_selected_tags_tag: donor_selected_tags.tag_name > tags.tag_name
Ref FK_donor_selected_tags_donor_session: donor_selected_tags.donor_session_id > donor_sessions.id

// Foreign keys for favorite_recipients table
Ref FK_favorite_recipients_donor: favorite_recipients.donor_id > donors.id
Ref FK_favorite_recipients_recipient: favorite_recipients.recipient_id > recipients.id
