// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

// ----------------------------------------------
// ---- Static Table Definitions ---- NOTE: These are not all of the table definitions. There are automated tables generated from the associations defined in the "Reference table definition" section
// ----------------------------------------------
// Note that total donation amount to recipient is tracked using separate donations table to avoid issues with
// possible inconsistent values
Table recipients { // Tracks our known recipients
  id integer [primary key, increment] // We may not need an ID if we're only going to allow recipients to be created through Cognito.
  cognito_id uuid [not null]
  email varchar(320) [not null, unique] // email is serving as username for Cognito accounts
  first_name varchar(255)
  last_name varchar(255)
  street_address1 nvarchar(255)
  street_address2 nvarchar(255)
  city nvarchar(255)
  state char(2)
  zip_code varchar(10)
  last_about_me text [not null] // latest "about me" text that is/will be utilized to generate the tags
  last_reason_for_help text [not null] // latest "why I need help" text that is/will be utilized to generate the tags through a single prompt.
  identity_last_verified timestamp // Date/time the recipient's identity was last verified, used to determine if recipient identity needs to be re-verified
  income_last_verified timestamp // Date/time the recipient's income was last verified, used to determine if recipient income needs to be re-verified
  nickname nvarchar(64)
  created_at timestamp
}

Table donors { // Tracks our known donors
  id integer [primary key, increment] // Since donor's don't need to sign up, we'll need an ID to track them regardless
  cognito_id uuid // Optional id if donors decide to sign up.
  email varchar(320) // email is serving as username for Cognito accounts
  nickname nvarchar(64)
  created_at timestamp
}

// Tracks each time a donor has started the process to donate to a recipient via the matching system.
Table donor_sessions {
  id integer [primary key, increment]
  donor_id integer [not null] // foreign key to donor table
  session_started timestamp // date/time the session started
}

Table donations { // Tracks all of the donation transactions that have occurred
  id integer [primary key, increment]
  donor_id integer [not null] // Will be foreign key to donor table
  recipient_id integer [not null] // Will be foreign key to recipient table
  amount integer [not null]
  created_at timestamp
}

Table tags { // Tracks all the known tags
  tag_name varchar(64) [primary key]
  created_at timestamp
}

Table messages { // Tracks messages between users
  id integer [primary key, increment]
  donor_id integer [not null] // Will be foreign key to donor table (defined below)
  recipient_id integer [not null] // Will be foreign key to recipient table (defined below)
  message text [not null]
  created_at timestamp
}

Table donor_prompts { // Tracks historical prompts that donor was given in a specific session
  id integer [primary key, increment]
  donor_session_id integer [not null] // Will be foreign key to donor_sessions table
  prompt text [not null]
  created_at timestamp
}

// ----------------------------------------------
// ---- Reference table definitions ----
// ----------------------------------------------
// Explicitly define join tables to control table and column names

// Create a table to track tags to recipients
// many-to-many. Many recipients can share a tag and a recipient can have many tags.
Table recipient_tags {
    tag_name varchar(64) [pk]
    recipient_id integer [pk]
}

// Create table to track which tags were shown to a donor in a specific session
// many-to-many. Many donors can be shown the same tag and a donor can be shown many tags.
Table donor_shown_tags {
   tag_name varchar(64) [pk] // foreign key to the tag shown
   donor_session_id integer [pk] // foreign key to donor_session, marking when the tags were shown
}

// Create table to track the tags that a donor selected in a specific session
// many-to-many. Many tags can be selected by the same donor and a donor can select many tags.
Table donor_selected_tags {
   tag_name varchar(64) [pk] // foreign key to the tag shown
   donor_session_id integer [pk] // foreign key to donor_session, marking when the tags were selected
}

// Create table to track a donor's favorite recipients.
// many-to-many. A donor can favorite many recipients. Recipients can be favorited by many donors.
Table favorite_recipients {
    donor_id integer [pk]
    recipient_id integer [pk]
}

// ----------------------------------------------
// ---- Foreign Key Relationship definitions ----
// ----------------------------------------------
// Define FKs here rather than inline because this allows specification of constraint names

// Each donation should be one donor to one recipient
Ref FK_donations_donor: donors.id - donations.donor_id
Ref FK_donations_recipient: recipients.id - donations.recipient_id

// Each message should be one donor to one recipient
Ref FK_messages_donor: donors.id - messages.donor_id
Ref FK_messages_recipient: recipients.id - messages.recipient_id

// many-to-one. Each donor should have many prompts. Prompts should be assigned to a single donor session.
Ref FK_donor_prompts_donor_session: donor_sessions.id < donor_prompts.donor_session_id

// Foreign keys for recipient_tags join table
Ref FK_recipient_tags_tag: recipient_tags.tag_name > tags.tag_name
Ref FK_recipient_tags_recipient: recipient_tags.recipient_id > recipients.id

// Foreign keys for donor_shown_tags table
Ref FK_donor_shown_tags_tag: donor_shown_tags.tag_name > tags.tag_name
Ref FK_donor_shown_tags_donor_session: donor_shown_tags.donor_session_id > donor_sessions.id

// Foreign keys for donor_selected_tags table
Ref FK_donor_selected_tags_tag: donor_selected_tags.tag_name > tags.tag_name
Ref FK_donor_selected_tags_donor_session: donor_selected_tags.donor_session_id > donor_sessions.id

// Foreign keys for favorite_recipients table
Ref FK_favorite_recipients_donor: favorite_recipients.donor_id > donors.id
Ref FK_favorite_recipients_recipient: favorite_recipients.recipient_id > recipients.id
