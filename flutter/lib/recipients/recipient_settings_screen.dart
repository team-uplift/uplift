/// recipient_settings_screen.dart
///
/// holds all settings and necessary functions for recipients to modify their
/// data on the app.
/// Includes:
/// - _rebuildFormDataFromRecipient
/// - _startCoolDown
/// - _formatDuration
/// - _goToEditProfile
/// - _updateUserEmail
/// - _showEmailUpdateDialog
/// - _showEmailConfirmationDialog
/// - _buildEditProfileCard
/// - _buildChangeEmailCard
/// - _buildLogOutCard
/// - _buildConvertAccountCard
/// - _buildDeleteAccountCard
///
library;

import 'dart:async';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:uplift/api/cognito_helper.dart';
import 'package:uplift/api/user_api.dart';
import 'package:uplift/components/basic_info_card.dart';
import 'package:uplift/components/verify_card.dart';
import 'package:uplift/constants/constants.dart';
import 'package:uplift/models/recipient_model.dart';
import 'package:uplift/models/user_model.dart';
import 'package:uplift/screens/recipient_reg_screens/registration_questions.dart';
import 'package:uplift/utils/logger.dart';
import 'package:uplift/utils/recipient_settings_helpers.dart';

class RecipientSettingsScreen extends StatefulWidget {
  final VoidCallback? editProfile;
  final VoidCallback? changeEmail;
  final VoidCallback? convertAccount;
  final VoidCallback onVerifyPressed;
  final User profile;
  final Recipient recipient;

  const RecipientSettingsScreen({
    super.key,
    this.editProfile,
    this.changeEmail,
    this.convertAccount,
    required this.profile,
    required this.recipient,
    required this.onVerifyPressed,
  });

  @override
  State<RecipientSettingsScreen> createState() =>
      _RecipientSettingsScreenState();
}

class _RecipientSettingsScreenState extends State<RecipientSettingsScreen> {
  bool canEdit = false;
  Duration timeRemaining = Duration.zero;
  Timer? countdownTimer;
  final api = UserApi();

  @override
  void initState() {
    super.initState();
    _startCooldown();
  }

  @override
  void dispose() {
    countdownTimer?.cancel();
    super.dispose();
  }

  /// starts cooldown timer for profile edit to limit number of api calls
  /// generated by chatgpt
  void _startCooldown() {
    // cancel any in-flight timer
    countdownTimer?.cancel();

    final lastGen = widget.recipient.tagsLastGenerated;
    if (lastGen == null) {
      // never generated → allow edit immediately
      setState(() {
        canEdit       = true;
        timeRemaining = Duration.zero;
      });
      return;
    }

    // compute initial values
    final rem = RecipientSettingsHelpers.computeTimeRemaining(lastGen);
    setState(() {
      timeRemaining = rem;
      canEdit       = rem == Duration.zero;
    });

    // if still cooling down, tick every second
    if (!canEdit) {
      countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
        final newRem = RecipientSettingsHelpers.computeTimeRemaining(lastGen);
        if (newRem == Duration.zero) {
          timer.cancel();
        }
        setState(() {
          timeRemaining = newRem;
          canEdit       = newRem == Duration.zero;
        });
      });
    }
  }

  /// navigates to registration form with questions pre-filled out based on
  /// user profile
  void _goToEditProfile() {
    final formData =
        RecipientSettingsHelpers.rebuildFormDataFromRecipient(widget.profile, widget.recipient, registrationQuestions);
    context.goNamed(
      '/recipient_registration',
      extra: {
        'profile': widget.profile,
        'formData': formData,
        'isEditing': true,
      },
    );
  }

  // coverage:ignore-start
  /// updates user email in cognito and backend upon request
  Future<void> _updateUserEmail({
    required BuildContext context,
    required String newEmail,
    required VoidCallback onSuccess,
  }) async {
    try {
      // TODO issue with cognito verification on email change
      await Amplify.Auth.updateUserAttribute(
        userAttributeKey: CognitoUserAttributeKey.email,
        value: newEmail,
      );

      final attrMap = await getCognitoAttributes();

      final success = await api.updateEmail(
        userId: widget.profile.id!,
        attrMap: attrMap!,
      );

      Navigator.pop(context);

      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('✅ Email updated in backend')),
        );
        onSuccess(); // e.g. show confirmation prompt
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('⚠️ Backend update failed.')),
        );
      }
    } on AuthException catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('❌ Cognito error: ${e.message}')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('❌ Unexpected error: $e')),
      );
    }
  }
  

  /// displays text field for user to update email
  void _showEmailUpdateDialog(BuildContext context) {
    final TextEditingController emailController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Update Email"),
          content: TextField(
            controller: emailController,
            decoration: const InputDecoration(
              labelText: 'New Email',
              hintText: 'you@example.com',
            ),
            keyboardType: TextInputType.emailAddress,
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context), // Cancel
              child: const Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: () async {
                final newEmail = emailController.text.trim();
                _updateUserEmail(
                    context: context,
                    newEmail: newEmail,
                    onSuccess: () {
                      _showEmailConfirmationDialog(context);
                    });
              },
              child: const Text("Update"),
            ),
          ],
        );
      },
    );
  }

  /// displays cognito authenticator steps for emailed code to new email address
  /// to finalize email change
  void _showEmailConfirmationDialog(BuildContext context) {
    final codeController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Verify Email"),
        content: TextField(
          controller: codeController,
          decoration: const InputDecoration(
            labelText: 'Confirmation Code',
          ),
          keyboardType: TextInputType.number,
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel")),
          ElevatedButton(
            onPressed: () async {
              try {
                await Amplify.Auth.confirmUserAttribute(
                  userAttributeKey: CognitoUserAttributeKey.email,
                  confirmationCode: codeController.text.trim(),
                );

                if (!mounted) return;
                Navigator.pop(context);

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("Email verified!")),
                );
              } on AuthException catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("Verification failed: ${e.message}")),
                );
              }
            },
            child: const Text("Confirm"),
          ),
        ],
      ),
    );
  }
  // coverage:ignore-end

  @override
  Widget build(BuildContext context) {
    final basicInfo = RecipientSettingsHelpers.buildNameAddressData(
      profile: widget.profile, 
      recipient: widget.recipient
    );
    return Scaffold(
        backgroundColor: AppColors.baseYellow,
        body: SafeArea(
          child: ListView(
            padding: const EdgeInsets.all(10),
            children: [
              VerifyCard(
                title: "Income Verification", 
                isVerified: widget.recipient.incomeLastVerified != null,
                onVerifyPressed: widget.recipient.incomeLastVerified == null
                  ? widget.onVerifyPressed
                  : null
              ),
              const SizedBox(height: 10),
              BasicInfoCard(
                fullName: basicInfo['fullName'],
                address: basicInfo['address'],
                email: basicInfo['email'],
              ),
              const SizedBox(height: 10),
              
              _buildEditProfileCard(),
              const SizedBox(height: 10),
              // TODO uncomment below when update email is functional
              // _buildChangeEmailCard(),
              // const SizedBox(height: 16),
              _buildLogoutCard(),
              const SizedBox(height: 10),
              _buildConvertAccountCard(),
              const SizedBox(height: 10),
              _buildDeleteAccountCard(),
            ],
          ),
        ),
    );
  }

          
  Widget _buildEditProfileCard() {
    return Card(
      color: AppColors.warmWhite,
      elevation: 5,
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
        side: BorderSide(color: AppColors.baseBlue, width: 4),
      ),
      child: ListTile(
        leading: const Icon(Icons.edit),
        title: const Text("Edit Profile"),
        subtitle: !canEdit
            ? Text(
                "Available in ${RecipientSettingsHelpers.formatDuration(timeRemaining)}",
                style: const TextStyle(color: Colors.grey),
              )
            : Text("Edit you profile to generate new tags \nThis can only be done once every 24 hours"),
        onTap: canEdit ? _goToEditProfile : null,
        enabled: canEdit,
      ),
    );
  }

  // coverage:ignore-start
  // TODO here to be used if we implement email changes
  Widget _buildChangeEmailCard() {
    return Card(
      color: AppColors.warmWhite,
      elevation: 5,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: ListTile(
        leading: const Icon(Icons.email),
        title: const Text("Change Email"),
        subtitle: const Text("Update your associated email address"),
        onTap: () => _showEmailUpdateDialog(context),
      ),
    );
  }
  // coverage:ignore-end

  Widget _buildLogoutCard() {
    return Card(
      color: AppColors.warmWhite,
      elevation: 5,
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: AppColors.baseBlue, width: 4),
      ),
      child: ListTile(
        leading: const Icon(Icons.logout),
        title: const Text("Logout"),
        subtitle: const Text("Log out of your account"),
        onTap: () async {
          try {
            await Amplify.Auth.signOut(
              options: const SignOutOptions(globalSignOut: true),
            );
            if (context.mounted) {
              context.goNamed('/redirect');
            }
          } on AuthException catch (e) {
            log.severe("Sign out error: ${e.message}");
          }
        },
      ),
    );
  }

  Widget _buildConvertAccountCard() {
    return Card(
      color: AppColors.warmWhite,
      elevation: 5,
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: AppColors.baseOrange, width: 4),
      ),
      child: ListTile(
        leading: const Icon(Icons.redo, color: AppColors.baseOrange),
        title: const Text("Convert Account", style: TextStyle(fontWeight: FontWeight.bold, color: AppColors.baseOrange)),
        subtitle: const Text("Convert account from recipient to donor"),
        onTap: widget.convertAccount ?? () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: const Text("Are you sure?"),
              content: const Text("This will convert your account."),
              actions: [
                TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text("Cancel")),
                ElevatedButton(
                  onPressed: () {
                    api.convertToDonor(widget.profile);
                    Navigator.pop(context);
                    context.goNamed('/redirect');
                  },
                  style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.baseRed,
                      foregroundColor: AppColors.warmWhite),
                  child: const Text("Convert Account"),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildDeleteAccountCard() {
    return Card(
      color: AppColors.warmWhite,
      elevation: 5,
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: AppColors.baseRed, width: 4),
      ),
      child: ListTile(
        leading: const Icon(Icons.delete_forever, color: AppColors.baseRed),
        title: const Text("Delete Account", style: TextStyle(fontWeight: FontWeight.bold, color: AppColors.baseRed)),
        subtitle: const Text("Permanently remove your account"),
        onTap: () {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: const Text("Are you sure?"),
              content: const Text("This will permanently delete your account."),
              actions: [
                TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text("Cancel")),
                ElevatedButton(
                  onPressed: () {
                    api.deleteAccount(widget.profile);
                    context.goNamed('/redirect');
                  },
                  style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.baseRed),
                  child: const Text("Delete"),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
