// lib/utils/recipient_settings_helpers.dart

import 'package:uplift/constants/constants.dart';
import 'package:uplift/models/recipient_model.dart';
import 'package:uplift/models/user_model.dart';

class RecipientSettingsHelpers {
  /// Turn a Duration into “HHh MMm SSs”
  /// generate by chatgpt
  static String formatDuration(Duration d) {
    final hours   = d.inHours;
    final minutes = d.inMinutes.remainder(60);
    final seconds = d.inSeconds.remainder(60);
    return "${hours.toString().padLeft(2,'0')}h "
         + "${minutes.toString().padLeft(2,'0')}m "
         + "${seconds.toString().padLeft(2,'0')}s";
  }

  /// Returns how much time remains until 24h have passed since [tagsLastGenerated].
  /// Yields `Duration.zero` if we’re already past the 24h mark.
  /// generated by chatgpt
  static Duration computeTimeRemaining(
    DateTime tagsLastGenerated, {
    DateTime? now,
  }) {
    final deadline = tagsLastGenerated.add(const Duration(hours: AppConfig.cooldownTime));
    final current  = now ?? DateTime.now();
    if (current.isAfter(deadline)) return Duration.zero;
    return deadline.difference(current);
  }

  /// function to build name and address data from a profile
  /// returns Map<String, String>
  static Map<String, String> buildNameAddressData({
    required User profile,
    required Recipient recipient,
  }) {
    // Full name
    final fullName = [
      recipient.firstName ?? '',
      recipient.lastName ?? '',
    ].where((s) => s.isNotEmpty).join(' ').trim();

    // Address lines
    final line1 = recipient.streetAddress1 ?? '';
    final line2 = recipient.streetAddress2;
    final city = recipient.city ?? '';
    final state = recipient.state ?? '';
    final zip = recipient.zipCode ?? '';

    final addressParts = <String>[line1];
    if (line2 != null && line2.isNotEmpty) {
      addressParts.add(line2);
    }
    final cityStateZip = '$city, $state${zip.isNotEmpty ? ' $zip' : ''}'.trim();
    addressParts.add(cityStateZip);

    final address = addressParts.join('\n');

    // Email from profile
    final email = profile.email;

    return {
      'fullName': fullName,
      'address': address,
      'email': email,
    };
  }

  /// function to rebuild a map for moving user information over to formdata
  /// to prepopulate the form
  /// 
  /// returns Map<String, dynamic> key val pairs
  static Map<String,dynamic> rebuildFormDataFromRecipient(
      User profile, Recipient recipient, List<Map<String,Object?>> registrationQuestions
  ) {
    final formData = <String,dynamic>{
      'userId'           : profile.id,
      'firstName'        : recipient.firstName,
      'lastName'         : recipient.lastName,
      'streetAddress1'   : recipient.streetAddress1,
      'streetAddress2'   : recipient.streetAddress2,
      'city'             : recipient.city,
      'state'            : recipient.state,
      'zipCode'          : recipient.zipCode?.toString() ?? '',
      'lastAboutMe'      : recipient.lastAboutMe,
      'lastReasonForHelp': recipient.lastReasonForHelp,
    };
    if (recipient.formQuestions != null) {
      for (final q in recipient.formQuestions!) {
        final match = registrationQuestions.firstWhere(
          (rq) => rq['q'] == q['question'],
          orElse: () => {},
        );
        final key  = match['key'];
        final type = match['type'];
        if (key is String) {
          if (type == 'checkbox') {
            formData[key] = (q['answer'] as String)
                .split(', ')
                .map((s) => s.trim()).toList();
          } else {
            formData[key] = q['answer'];
          }
        }
      }
    }
    return formData;
  }
}
