// test/screens/recipient_history_screen_test.dart
// generated by chatgpt

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';
import 'package:uplift/api/recipient_api.dart';
import 'package:uplift/models/donation_model.dart';
import 'package:uplift/models/recipient_model.dart';
import 'package:uplift/models/user_model.dart';
import 'package:uplift/recipients/recipient_history_screen.dart';

class MockRecipientApi extends Mock implements RecipientApi {}

void main() {
  late MockRecipientApi mockApi;
  late User dummyUser;
  late Recipient dummyRecipient;

  setUp(() {
    mockApi = MockRecipientApi();
    dummyRecipient = Recipient(id: 1, formQuestions: []);
    dummyUser = User(
      id: 1,
      cognitoId: 'cid',
      email: 'a@b.com',
      recipient: true,
      recipientData: dummyRecipient,
      donorData: null,
      createdAt: DateTime.now(),
    );
  });

  Widget _buildTestApp() {
    return MaterialApp(
      home: RecipientHistoryScreen(
        profile: dummyUser,
        recipient: dummyRecipient,
        api: mockApi, // make sure your widget takes this `api` parameter
      ),
    );
  }

  testWidgets(
    'tapping a card pushes detail screen and then reloads when popped true',
    (tester) async {
      // Arrange: set up one donation, then an empty list on the second call
      final donation = Donation(
        id: 20,
        createdAt: DateTime.parse('2025-03-03T00:00:00Z'),
        donorName: 'Carol',
        amount: 250,
      );
      var callCount = 0;
      when(() => mockApi.fetchDonationsForRecipient(1)).thenAnswer((_) async {
        callCount++;
        final list = callCount == 1 ? [donation] : <Donation>[];
        return (list, list.isEmpty ? "No donations yet." : '');
      });
      // Act: pump & settle so initState/_loadDonations runs
      await tester.pumpWidget(_buildTestApp());
      await tester.pumpAndSettle();

      // Verify initial card shows up
      expect(find.text('From Carol'), findsOneWidget);

      // Act: tap the card to navigate
      await tester.tap(find.byType(ListTile).first);
      await tester.pumpAndSettle();

      // Simulate popping the detail screen with `true`
      tester.state<NavigatorState>(find.byType(Navigator)).pop(true);
      await tester.pumpAndSettle();

      // Assert: after the pop we hit the second stub (empty list)
      expect(find.byType(CircularProgressIndicator), findsNothing);
      expect(find.text('No donations yet.'), findsOneWidget);
      expect(find.byIcon(Icons.inbox_outlined), findsOneWidget);
    },
  );
}
