// test/screens/recipient_settings_dialog_test.dart
// Widget tests for RecipientSettingsScreen dialog interactions (Convert and Delete)
// generated by chatgpt

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:go_router/go_router.dart';
import 'package:uplift/recipients/recipient_settings_screen.dart';
import 'package:uplift/models/user_model.dart';
import 'package:uplift/models/recipient_model.dart';
import 'package:uplift/models/tag_model.dart';

void main() {
  late User dummyUser;
  late Recipient dummyRecipient;
  late GoRouter router;

  setUp(() {
    // Setup a dummy user and recipient with tagsLastGenerated > 24h ago
    final yesterday = DateTime.now().subtract(const Duration(hours: 25));
    dummyRecipient = Recipient(
      id: 1,
      firstName: 'A',
      lastName: 'B',
      streetAddress1: '',
      streetAddress2: '',
      city: '',
      state: '',
      zipCode: '',
      lastAboutMe: '',
      lastReasonForHelp: '',
      formQuestions: [],
      identityLastVerified: null,
      incomeLastVerified: null,
      nickname: null,
      createdAt: null,
      imageURL: null,
      lastDonationTimestamp: null,
      tags: [Tag(createdAt: yesterday, tagName: 't', weight: 0.5, addedAt: yesterday)],
      tagsLastGenerated: yesterday,
    );
    dummyUser = User(
      id: 1,
      cognitoId: 'cid',
      email: 'e@x.com',
      recipient: true,
      recipientData: dummyRecipient,
      donorData: null,
      createdAt: null,
    );

    router = GoRouter(
      initialLocation: '/',
      routes: [
        GoRoute(
          path: '/',
          builder: (c, s) => RecipientSettingsScreen(
            profile: dummyUser,
            recipient: dummyRecipient,
            onVerifyPressed: () {},
          ),
        ),
      ],
    );
  });

  Future<void> _pumpSettings(WidgetTester tester) async {
    await tester.pumpWidget(
      MaterialApp.router(
        routerConfig: router,
      ),
    );
    await tester.pumpAndSettle();
  }

  testWidgets('tapping Convert Account shows confirmation dialog', (tester) async {
    await _pumpSettings(tester);

    // Find Convert Account ListTile
    final convertTile = find.text('Convert Account');
    expect(convertTile, findsOneWidget);

    // Tap it
    await tester.tap(convertTile);
    await tester.pumpAndSettle();

    // Expect AlertDialog with 'Are you sure?'
    expect(find.byType(AlertDialog), findsOneWidget);
    expect(find.text('Are you sure?'), findsOneWidget);
    expect(find.text('This will convert your account.'), findsOneWidget);

    // Cancel button exits dialog
    await tester.tap(find.text('Cancel'));
    await tester.pumpAndSettle();
    expect(find.byType(AlertDialog), findsNothing);
  });

        testWidgets('tapping Delete Account shows confirmation dialog', (tester) async {
    await _pumpSettings(tester);

    // Scroll until Delete Account is visible
    await tester.scrollUntilVisible(
      find.text('Delete Account'),
      300.0,
      scrollable: find.byType(Scrollable),
    );

    // Find Delete Account ListTile via its text label
    final deleteTile = find.text('Delete Account');
    expect(deleteTile, findsOneWidget);

    // Tap it
    await tester.tap(deleteTile);
    await tester.pumpAndSettle();

    // Expect AlertDialog with 'Are you sure?'
    expect(find.byType(AlertDialog), findsOneWidget);
    expect(find.text('Are you sure?'), findsOneWidget);
    expect(find.text('This will permanently delete your account.'), findsOneWidget);

    // Cancel button exits dialog
    await tester.tap(find.text('Cancel'));
    await tester.pumpAndSettle();
    expect(find.byType(AlertDialog), findsNothing);
  });
}
