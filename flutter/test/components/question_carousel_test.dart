// test/components/question_carousel_test.dart
// Tests generated by ChatGPT

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:uplift/components/question_carousel.dart';
import 'package:uplift/constants/constants.dart';

void main() {
  group('QuestionCarousel Widget', () {
    final items = [
      QuestionAnswer(question: 'Q1?', answer: 'A1.'),
      QuestionAnswer(question: 'Q2?', answer: 'A2.'),
      QuestionAnswer(question: 'Q3?', answer: 'A3.'),
    ];

    testWidgets('renders first question by default', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: QuestionCarousel(items: items),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Should display first question and answer
      expect(find.text('Q1?'), findsOneWidget);
      expect(find.text('A1.'), findsOneWidget);
    });

    testWidgets('swipes to next question', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: QuestionCarousel(items: items),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Swipe left to see second item
      await tester.drag(find.byType(PageView), const Offset(-300, 0));
      await tester.pumpAndSettle();

      expect(find.text('Q2?'), findsOneWidget);
      expect(find.text('A2.'), findsOneWidget);
    });

    testWidgets('has correct default height', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: QuestionCarousel(items: items),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final sizedBox = tester.widget<SizedBox>(find.byType(SizedBox).first);
      expect(sizedBox.height, equals(200));
    });

    testWidgets('respects custom cardHeight parameter', (tester) async {
      const customHeight = 150.0;
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: QuestionCarousel(items: items, cardHeight: customHeight),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final sizedBox = tester.widget<SizedBox>(find.byType(SizedBox).first);
      expect(sizedBox.height, equals(customHeight));
    });

    testWidgets('cards have correct styling', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: QuestionCarousel(items: [items[0]]),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final card = tester.widget<Card>(find.byType(Card));
      expect(card.elevation, equals(5));
      expect(card.color, equals(AppColors.warmWhite));
      final shape = card.shape as RoundedRectangleBorder;
      expect(shape.borderRadius, equals(BorderRadius.circular(20)));
      expect(shape.side.color, equals(AppColors.baseBlue));
      expect(shape.side.width, equals(4));
    });
  });
}
