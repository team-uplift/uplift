// test/components/profile_tags_section_test.dart
// Tests generated by ChatGPT

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:uplift/components/recipient_tag_section.dart';
import 'package:uplift/components/match_color_legend.dart';
import 'package:uplift/components/tag_card.dart';
import 'package:uplift/constants/constants.dart';
import 'package:uplift/models/tag_model.dart';

void main() {
  group('ProfileTagsSection Widget', () {
    final tags = [
      Tag(
        tagName: 'Health',
        weight: 0.8,
        createdAt: DateTime.parse('2025-04-01T00:00:00Z'),
        addedAt: DateTime.parse('2025-04-01T00:00:00Z'),
        selected: true,
      ),
      Tag(
        tagName: 'Education',
        weight: 0.5,
        createdAt: DateTime.parse('2025-04-02T00:00:00Z'),
        addedAt: DateTime.parse('2025-04-02T00:00:00Z'),
        selected: false,
      ),
    ];

    testWidgets('renders title and legend', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: ProfileTagsSection(tags: tags),
          ),
        ),
      );
      await tester.pumpAndSettle();

      expect(find.text('Your Tags'), findsOneWidget);
      expect(find.byType(MatchColorLegend), findsOneWidget);
    });

    testWidgets('renders correct number of TagCard widgets', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: ProfileTagsSection(tags: tags),
          ),
        ),
      );
      await tester.pumpAndSettle();

      expect(find.byType(TagCard), findsNWidgets(tags.length));
    });

    testWidgets('Card styling matches design spec', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: ProfileTagsSection(tags: tags),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final card = tester.widget<Card>(find.byType(Card));
      expect(card.elevation, equals(5));
      expect(card.color, equals(AppColors.warmWhite));
      final shape = card.shape as RoundedRectangleBorder;
      expect(shape.borderRadius, equals(BorderRadius.circular(20)));
      expect(shape.side.color, equals(AppColors.baseOrange));
      expect(shape.side.width, equals(4));
    });
  });
}
