// test/components/verify_card_test.dart
// Tests generated by ChatGPT

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:uplift/components/verify_card.dart';
import 'package:uplift/constants/constants.dart';

void main() {
  group('VerifyCard Widget', () {
    const title = 'Income Verification';

    testWidgets('renders Verified state correctly', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VerifyCard(
              title: title,
              isVerified: true,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Title text
      expect(find.text(title), findsOneWidget);
      final titleText = tester.widget<Text>(find.text(title));
      expect(titleText.style, equals(Theme.of(tester.element(find.text(title))).textTheme.titleLarge));

      // Card styling
      final card = tester.widget<Card>(find.byType(Card));
      expect(card.elevation, equals(5.0));
      expect(card.color, equals(AppColors.warmWhite));
      final shape = card.shape as RoundedRectangleBorder;
      expect(shape.side.color, equals(AppColors.baseGreen));
      expect(shape.side.width, equals(4));

      // Verified icon and text
      expect(find.byIcon(Icons.verified), findsOneWidget);
      expect(find.text('Verified'), findsOneWidget);

      // No button or warning text
      expect(find.text('Verify Now'), findsNothing);
      expect(find.textContaining('You are not eligible'), findsNothing);
    });

    testWidgets('renders Unverified state with callback', (tester) async {
      bool called = false;
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VerifyCard(
              title: title,
              isVerified: false,
              onVerifyPressed: () => called = true,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Title text
      expect(find.text(title), findsOneWidget);

      // Card styling
      final card = tester.widget<Card>(find.byType(Card));
      expect(card.elevation, equals(8.0));
      final expectedColor = Colors.red[100];
      expect(card.color, equals(expectedColor));
      final shape = card.shape as RoundedRectangleBorder;
      expect(shape.side.color, equals(AppColors.baseRed));

                        // Verify Now button
      final verifyBtn = find.text('Verify Now');
      expect(verifyBtn, findsOneWidget);
      await tester.tap(verifyBtn);
      await tester.pumpAndSettle();
      expect(called, isTrue);

      // Warning text shown
      expect(
        find.text('You are not eligible to receive donations until you verify.'),
        findsOneWidget,
      );
    });

    testWidgets('renders Unverified state without callback', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VerifyCard(
              title: title,
              isVerified: false,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // No button if callback null
      expect(find.text('Verify Now'), findsNothing);

      // Warning text still shown
      expect(
        find.text('You are not eligible to receive donations until you verify.'),
        findsOneWidget,
      );
    });
  });
}
