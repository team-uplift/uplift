// test/components/visible_info_card_test.dart
// Tests generated by ChatGPT

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:uplift/components/donor_visible_info_card.dart';
import 'package:uplift/constants/constants.dart';

void main() {
  group('VisibleInfoCard Widget', () {
    const aboutMe = 'I love volunteering.';
    const reasonForNeed = 'I need help buying groceries.';

    testWidgets('renders header with icon and descriptive text', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VisibleInfoCard(
              aboutMe: aboutMe,
              reasonForNeed: reasonForNeed,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Header row
      expect(find.byIcon(Icons.visibility), findsOneWidget);
      expect(
        find.text('Donors can see this information'),
        findsOneWidget,
      );
      final headerText = tester.widget<Text>(
        find.text('Donors can see this information'),
      );
      expect(
        headerText.style?.color,
        equals(AppColors.baseBlue),
      );
    });

    testWidgets('renders About Me and reason sections correctly', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VisibleInfoCard(
              aboutMe: aboutMe,
              reasonForNeed: reasonForNeed,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Section titles
      expect(find.text('About Me'), findsOneWidget);
      expect(find.text('Why I Need Help'), findsOneWidget);

      // Section contents
      expect(find.text(aboutMe), findsOneWidget);
      expect(find.text(reasonForNeed), findsOneWidget);
    });

    testWidgets('Card styling matches design spec', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VisibleInfoCard(
              aboutMe: aboutMe,
              reasonForNeed: reasonForNeed,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final card = tester.widget<Card>(find.byType(Card));
      // Margin and elevation
      expect(
        card.margin,
        equals(const EdgeInsets.symmetric(horizontal: 10, vertical: 8)),
      );
      expect(card.elevation, equals(5));
      expect(card.color, equals(AppColors.warmWhite));

      final shape = card.shape as RoundedRectangleBorder;
      expect(shape.borderRadius, equals(BorderRadius.circular(20)));
      expect(shape.side.color, equals(AppColors.baseGreen));
      expect(shape.side.width, equals(4));
    });

        testWidgets('throws when required fields are null', (tester) async {
      // Building widget without required fields should log a TypeError
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: VisibleInfoCard(),
          ),
        ),
      );
      // Capture the exception from the build
      final exception = tester.takeException();
      expect(exception, isA<TypeError>());
    });
  });
}
