// test/components/recipient_appbar_test.dart
// Tests generated by ChatGPT

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:uplift/components/recipient_appbar.dart';
import 'package:uplift/constants/constants.dart';

void main() {
  group('RecipientAppBar Widget', () {
    testWidgets('renders title and Unverified button by default', (tester) async {
      bool tapped = false;
      const titleWidget = Text('Profile');

      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            appBar: RecipientAppBar(
              title: titleWidget,
              onVerifyPressed: () { tapped = true; },
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Title
      expect(find.text('Profile'), findsOneWidget);

      // Unverified button
      final unverified = find.text('Unverified');
      expect(unverified, findsOneWidget);
      expect(find.byType(TextButton), findsOneWidget);

      // Tap callback
      await tester.tap(unverified);
      expect(tapped, isTrue);
    });

    testWidgets('renders Verified status when isVerified is true', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            appBar: RecipientAppBar(
              title: const Text('Profile'),
              isVerified: true,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Verified icon and text
      expect(find.byIcon(Icons.verified), findsOneWidget);
      expect(find.text('Verified'), findsOneWidget);
      // No Unverified button
      expect(find.text('Unverified'), findsNothing);
    });

    testWidgets('uses gradient when useGradient is true', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            appBar: RecipientAppBar(
              title: const Text('Title'),
              useGradient: true,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final appBar = tester.widget<AppBar>(find.byType(AppBar));
      expect(appBar.backgroundColor, isNull);
      expect(appBar.flexibleSpace, isA<Container>());
    });

    testWidgets('uses solid color when useGradient is false', (tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            appBar: RecipientAppBar(
              title: const Text('Title'),
              useGradient: false,
            ),
          ),
        ),
      );
      await tester.pumpAndSettle();

      final appBar = tester.widget<AppBar>(find.byType(AppBar));
      expect(appBar.backgroundColor, equals(AppColors.baseGreen));
      expect(appBar.flexibleSpace, isNull);
    });
  });
}