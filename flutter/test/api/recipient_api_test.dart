// test/api/recipient_api_test.dart
// Tests generated by ChatGPT

import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http;
import 'package:mocktail/mocktail.dart';

import 'package:uplift/api/recipient_api.dart';
import 'package:uplift/constants/constants.dart';


class MockClient extends Mock implements http.Client {}

void main() {
  const baseUrl = AppConfig.baseUrl;
  late MockClient mockClient;
  late RecipientApi api;

  // Shared test data
  const formData = {
    'firstName': 'Jane',
    'lastName': 'Doe',
    'streetAddress1': '123 Main St',
    'streetAddress2': 'Apt 4',
    'city': 'Testville',
    'state': 'TS',
    'zipCode': '12345',
    'lastAboutMe': 'Hello!',
    'lastReasonForHelp': 'Need help',
  };
  const formQuestions = [
    {'question': 'Q1', 'answer': 'A1'}
  ];
  const attrMap = {'sub': 'abc', 'email': 'jane@doe.com'};

  setUpAll(() {
    registerFallbackValue(Uri.parse(''));
  });

  setUp(() {
    mockClient = MockClient();
    api = RecipientApi(client: mockClient);
  });

  group('createRecipientUser', () {
    test('returns id for success statuses (200, 201)', () async {
      for (final status in [200, 201]) {
        when(() => mockClient.post(
              Uri.parse('$baseUrl/users'),
              headers: any(named: 'headers'),
              body: any(named: 'body'),
            )).thenAnswer((_) async => http.Response(jsonEncode({'id': status}), status));

        final id = await api.createRecipientUser(formData, formQuestions, attrMap);
        expect(id, equals(status));
        reset(mockClient);
      }
    });

    test('returns null on error status', () async {
      when(() => mockClient.post(
            any(),
            headers: any(named: 'headers'),
            body: any(named: 'body'),
          )).thenAnswer((_) async => http.Response('error', 500));

      final id = await api.createRecipientUser(formData, formQuestions, attrMap);
      expect(id, isNull);
    });

    test('returns null on exception', () async {
      when(() => mockClient.post(
            any(),
            headers: any(named: 'headers'),
            body: any(named: 'body'),
          )).thenThrow(Exception('network error'));

      final id = await api.createRecipientUser(formData, formQuestions, attrMap);
      expect(id, isNull);
    });
  });

  group('updateTags', () {
    test('returns true on 204', () async {
      when(() => mockClient.put(
            Uri.parse('$baseUrl/recipients/tagSelection/7'),
            headers: {'Content-Type': 'application/json'},
            body: any(named: 'body'),
          )).thenAnswer((_) async => http.Response('', 204));

      final ok = await api.updateTags(7, ['t1', 't2']);
      expect(ok, isTrue);
    });

    test('returns false on non-204 or exception', () async {
      when(() => mockClient.put(
            any(),
            headers: any(named: 'headers'),
            body: any(named: 'body'),
          )).thenAnswer((_) async => http.Response('', 400));

      var ok = await api.updateTags(7, []);
      expect(ok, isFalse);

      when(() => mockClient.put(any(), headers: any(named: 'headers'), body: any(named: 'body')))
          .thenThrow(Exception('fail'));
      ok = await api.updateTags(7, []);
      expect(ok, isFalse);
    });
  });

  group('fetchDonationsForRecipient', () {
    test('parses list on 200 and empty message if no donations', () async {
      when(() => mockClient.get(
            Uri.parse('$baseUrl/donations/recipient/5'),
            headers: any(named: 'headers'),
          )).thenAnswer(
        (_) async => http.Response(jsonEncode([]), 200),
      );

      final result = await api.fetchDonationsForRecipient(5);
      final donations = result.$1;
      final message = result.$2;
      expect(donations, isEmpty);
      expect(message, equals('No donations yet.'));
    });

    test('returns empty list and error message on non-200 or exception', () async {
      when(() => mockClient.get(any(), headers: any(named: 'headers')))
          .thenAnswer((_) async => http.Response('not found', 404));

      var result = await api.fetchDonationsForRecipient(5);
      expect(result.$1, isEmpty);
      expect(result.$2, equals('Failed to fetch donations.'));

      when(() => mockClient.get(any(), headers: any(named: 'headers')))
          .thenThrow(Exception('oops'));
      result = await api.fetchDonationsForRecipient(5);
      expect(result.$1, isEmpty);
      expect(result.$2, equals('Error fetching donations.'));
    });
  });

  group('fetchDonationById', () {
    test('parses donation on 200', () async {
      when(() => mockClient.get(
            Uri.parse('$baseUrl/donations/2'),
            headers: any(named: 'headers'),
          )).thenAnswer(
        (_) async => http.Response(
            jsonEncode({
              'id': 2,
              'createdAt': '2025-04-21T10:00:00Z',
              'donor': {'nickname': 'Y'},
              'amount': 2000
            }),
            200),
      );

      final donation = await api.fetchDonationById(2);
      expect(donation, isNotNull);
      expect(donation!.id, equals(2));
    });

    test('returns null on exception', () async {
      when(() => mockClient.get(any(), headers: any(named: 'headers'))).thenThrow(Exception('fail'));

      final donation = await api.fetchDonationById(2);
      expect(donation, isNull);
    });
  });

  group('sendThankYouMessage', () {
    test('returns Donation on success (201)', () async {
      when(() => mockClient.post(
            Uri.parse('$baseUrl/messages'),
            headers: any(named: 'headers'),
            body: any(named: 'body'),
          )).thenAnswer(
        (_) async => http.Response(
            jsonEncode({
              'id': 3,
              'createdAt': '2025-04-21T10:00:00Z',
              'donor': {'nickname': 'Z'},
              'amount': 3000
            }),
            201),
      );

      final d = await api.sendThankYouMessage(donationId: 3, message: 'thanks');
      expect(d, isNotNull);
      expect(d!.donorName, equals('Z'));
    });

    test('returns null on non-success or exception', () async {
      when(() => mockClient.post(any(), headers: any(named: 'headers'), body: any(named: 'body')))
          .thenAnswer((_) async => http.Response('', 400));
      var d = await api.sendThankYouMessage(donationId: 3, message: 'x');
      expect(d, isNull);

      when(() => mockClient.post(any(), headers: any(named: 'headers'), body: any(named: 'body')))
          .thenThrow(Exception('fail'));
      d = await api.sendThankYouMessage(donationId: 3, message: 'x');
      expect(d, isNull);
    });
  });

  group('updateRecipientUserProfile', () {
    test('returns true on 200', () async {
      when(() => mockClient.put(
            Uri.parse('$baseUrl/users'),
            headers: any(named: 'headers'),
            body: any(named: 'body'),
          )).thenAnswer((_) async => http.Response('', 200));

      final ok = await api.updateRecipientUserProfile(formData, formQuestions, attrMap);
      expect(ok, isTrue);
    });

    test('returns false on exception', () async {
      when(() => mockClient.put(any(), headers: any(named: 'headers'), body: any(named: 'body')))
          .thenThrow(Exception('fail'));

      final ok = await api.updateRecipientUserProfile(formData, formQuestions, attrMap);
      expect(ok, isFalse);
    });
  });
}
