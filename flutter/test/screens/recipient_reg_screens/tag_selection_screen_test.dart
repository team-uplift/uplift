// test/components/tag_selection_screen_test.dart
// Widget tests for TagSelection screen
// generated by chatgpt

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:uplift/models/tag_model.dart';
import 'package:uplift/screens/recipient_reg_screens/tag_selection_screen.dart';

void main() {
  group('TagSelection Widget', () {
    late List<Tag> tags;
    late Map<String, dynamic> formData;
    late bool submitCalled;

    setUp(() {
      tags = [
        Tag(tagName: 'Low', weight: 0.1, createdAt: DateTime.now(), addedAt: DateTime.now()),
        Tag(tagName: 'High', weight: 0.9, createdAt: DateTime.now(), addedAt: DateTime.now()),
        Tag(tagName: 'Medium', weight: 0.5, createdAt: DateTime.now(), addedAt: DateTime.now()),
      ];
      // Shuffle initial
      tags = [tags[1], tags[2], tags[0]];
      formData = {};
      submitCalled = false;
    });

    Widget buildTest() {
      return MaterialApp(
        home: Scaffold(
          body: TagSelection(
            formData: formData,
            availableTags: tags,
            onSubmit: () => submitCalled = true,
            onBack: () {},
          ),
        ),
      );
    }

    testWidgets('sorts tags by weight desc on build', (tester) async {
      await tester.pumpWidget(buildTest());
      await tester.pumpAndSettle();

      // After sorting, first should be weight 0.9 -> 'High'
      final wrap = find.byType(Wrap);
      expect(wrap, findsOneWidget);
      // The children order can be inferred by reading first Text
      final firstTag = find.descendant(
          of: wrap, matching: find.text('High')).first;
      expect(firstTag, findsOneWidget);
    });

    testWidgets('initial count and Submit button disabled', (tester) async {
      await tester.pumpWidget(buildTest());
      await tester.pumpAndSettle();

      expect(find.text('0 of 10 selected'), findsOneWidget);
      final submitBtn = tester.widget<ElevatedButton>(find.byType(ElevatedButton));
      expect(submitBtn.onPressed, isNull);
    });

    testWidgets('toggles tag selection and updates count', (tester) async {
      await tester.pumpWidget(buildTest());
      await tester.pumpAndSettle();

      // Tap 'Medium'
      await tester.tap(find.text('Medium'));
      await tester.pumpAndSettle();
      expect(find.text('1 of 10 selected'), findsOneWidget);

      // Tap again to unselect
      await tester.tap(find.text('Medium'));
      await tester.pumpAndSettle();
      expect(find.text('0 of 10 selected'), findsOneWidget);
    });

    testWidgets('enables Submit when tags selected and calls onSubmit', (tester) async {
      await tester.pumpWidget(buildTest());
      await tester.pumpAndSettle();

      // Select two tags
      await tester.tap(find.text('Low'));
      await tester.tap(find.text('High'));
      await tester.pumpAndSettle();
      expect(find.text('2 of 10 selected'), findsOneWidget);

      // Now Submit enabled
      final submitFinder = find.widgetWithText(ElevatedButton, 'Submit');
      final submitBtn = tester.widget<ElevatedButton>(submitFinder);
      expect(submitBtn.onPressed, isNotNull);

      // Tap Submit
      await tester.tap(submitFinder);
      await tester.pumpAndSettle();

      expect(submitCalled, isTrue);
      expect(formData['tags'], isA<List<Tag>>());
      final selectedList = formData['tags'] as List<Tag>;
      expect(selectedList.length, equals(2));
      expect(selectedList.map((t) => t.tagName), containsAll(['Low', 'High']));
    });
  });
}
