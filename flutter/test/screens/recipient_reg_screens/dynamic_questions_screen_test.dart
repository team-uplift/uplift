// test/components/dynamic_question_screen_test.dart
// Widget tests for DynamicQuestionScreen
// generated by chatgpt

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:uplift/screens/recipient_reg_screens/dynamic_questions_screen.dart';

void main() {
  group('DynamicQuestionScreen', () {
    testWidgets('renders text question and calls onNext when filled', (tester) async {
      final formData = <String, dynamic>{};
      final questions = [
        {'key': 'q1', 'q': 'Question 1?', 'type': 'text', 'required': true},
      ];
      var nextCalled = false;

      await tester.pumpWidget(
        MaterialApp(
          home: DynamicQuestionScreen(
            formData: formData,
            questions: questions,
            questionIndex: 0,
            onNext: () => nextCalled = true,
            onBack: () {},
            onGenerate: () {},
            returnToConfirmation: false,
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Should display question and a text field
      expect(find.text('Question 1?'), findsOneWidget);
      expect(find.byType(FormBuilderTextField), findsOneWidget);

      // Attempt to proceed without input
      await tester.tap(find.text('Next'));
      await tester.pumpAndSettle();
      expect(nextCalled, isFalse);

      // Enter text and proceed
      await tester.enterText(find.byType(FormBuilderTextField), 'Answer');
      await tester.pumpAndSettle();
      await tester.tap(find.text('Next'));
      await tester.pumpAndSettle();

      expect(nextCalled, isTrue);
      expect(formData['q1'], equals('Answer'));
    });

    testWidgets('renders and processes multipleChoice field', (tester) async {
      final formData = <String, dynamic>{};
      final questions = [
        {'key': 'mc', 'q': 'Pick one', 'type': 'multipleChoice', 'required': true, 'options': ['A', 'B']},
      ];
      var nextCount = 0;

      await tester.pumpWidget(
        MaterialApp(
          home: DynamicQuestionScreen(
            formData: formData,
            questions: questions,
            questionIndex: 0,
            onNext: () => nextCount++,
            onBack: () {},
            onGenerate: () {},
            returnToConfirmation: false,
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Select option A and proceed
      await tester.tap(find.text('A'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Next'));
      await tester.pumpAndSettle();

      expect(nextCount, equals(1));
      expect(formData['mc'], equals('A'));
    });

    testWidgets('renders and processes checkbox field', (tester) async {
      final formData = <String, dynamic>{};
      final questions = [
        {'key': 'cb', 'q': 'Pick multiple', 'type': 'checkbox', 'required': true, 'options': ['X', 'Y']},
      ];
      var nextCount = 0;

      await tester.pumpWidget(
        MaterialApp(
          home: DynamicQuestionScreen(
            formData: formData,
            questions: questions,
            questionIndex: 0,
            onNext: () => nextCount++,
            onBack: () {},
            onGenerate: () {},
            returnToConfirmation: false,
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Select option Y and proceed
      await tester.tap(find.text('Y'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Next'));
      await tester.pumpAndSettle();

      expect(nextCount, equals(1));
      final cb = formData['cb'] as List<String>;
      expect(cb, contains('Y'));
    });

    testWidgets('renders compositeAddress fields and Back button label', (tester) async {
      final formData = <String, dynamic>{};
      final questions = [
        {'key': 'addr', 'q': 'Address', 'type': 'compositeAddress'},
      ];

      await tester.pumpWidget(
        MaterialApp(
          home: DynamicQuestionScreen(
            formData: formData,
            questions: questions,
            questionIndex: 0,
            onNext: () {},
            onBack: () {},
            onGenerate: () {},
            returnToConfirmation: true,
          ),
        ),
      );
      await tester.pumpAndSettle();

      // Presence of composite fields
      expect(find.byType(FormBuilderTextField), findsNWidgets(6));
      expect(find.byType(FormBuilderDropdown<String>), findsOneWidget);

      // Button label changes
      expect(find.text('Back to Confirmation'), findsOneWidget);
    });
  });
}
